#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: oracle_cloud_storage
short_description: Manage Create / Delete Containers in Oracle Storage Cloud Service
description:
    - Best way to use this module in task playbooks is to delegate_to: 127.0.0.1
version_added: "0.1.0"
options:
    identityDomain:
        description:
            - Name of the identity domain housing the Database as a Service subscription or trial to which the request applies.
        required: true
        default:     
    user:
        description:
            - 
        required: true
        default:
    password:
        description:
            - 
        required: true
        default:    
    state:
        description:
            - The intended state of the Oracle Cloud Instance
                - present = Create Storage Container
                - absent = Delete Storage Container
        required: true
        choices=["present","absent"]
    containerName:
        description:
            - A string containing the name for containerName .
        required: true
        default:
notes:
    - required=True needs to be installed
requirements: [ "request" ]
author: Bj√∂rn Ahl, bjorn.ahl@gmail.com, @TwittAhl
'''

EXAMPLES = '''
# Create Contrainer in Storage Cloud
oracle_cloud_storage: identityDomain: domain1 user: oracle_cloud_admin_user password: oracle_cloud_admin_password containerName: Oracle Cloud Service Name state: present

# Delete Contrainer in Storage Cloud
oracle_cloud_storage: identityDomain: domain1 user: oracle_cloud_admin_user password: oracle_cloud_admin_password containerName: Oracle Cloud Service Name state: absent
'''

try:
    import requests
    import time
except ImportError:
    requests_exists = False
else:
    requests_exists = True
    
def containerExists(module, restSession):
    url = "https://storage.us2.oraclecloud.com/v1/Storage-" + module.params["identityDomain"]
    returnData = restSession.get(url)
    
    if module.params["containerName"] in returnData.text:
        return True
    else:
        return False

def getAuthToken(module):
    
    url = "https://seb3itdbgeek.storage.oraclecloud.com/auth/v1.0"
    restSession = requests.Session()
    restSession.headers.update({"X-Storage-User": "Storage-" + module.params["identityDomain"] + ":" + module.params["user"],"X-Storage-Pass": module.params["password"]})
    
    returnData = restSession.get(url)
    
    return returnData.headers["X-Auth-Token"]

def createStorageContainer(module, restSession):
    
    if not containerExists(module, restSession):
        url = "https://storage.us2.oraclecloud.com/v1/Storage-" + module.params["identityDomain"] + "/" + module.params["containerName"]
        returnHeaders = restSession.put(url)
        message = 'Storage Container %s successfully created' % (module.params["containerName"])
        module.exit_json(msg=message, changed=True)
    else:
        message = 'Storage Container %s already exists' % (module.params["containerName"])
        module.exit_json(msg=message, changed=False)

def deleteStorageContainer(module, restSession):
    
    if containerExists(module, restSession):
        url = "https://storage.us2.oraclecloud.com/v1/Storage-" + module.params["identityDomain"] + "/" + module.params["containerName"]
        returnHeaders = restSession.delete(url)
        message = 'Storage Container %s successfully deleted' % (module.params["containerName"])
        module.exit_json(msg=message, changed=True)
    else:
        message = 'Storage Container %s not exists' % (module.params["containerName"])
        module.exit_json(msg=message, changed=False)

def main():
    msg = ['']
    module = AnsibleModule(
        argument_spec = dict(
            identityDomain          = dict(required=True),
            user                    = dict(required=True),
            password                = dict(required=True),
            state                   = dict(choices=["present","absent"]),
            containerName           = dict(required=True),
        ),
        supports_check_mode=True
    )

    restSession = requests.Session()
    restSession.headers.update({"X-Auth-Token": getAuthToken(module) })
    
    if module.params["state"] == 'present':
        createStorageContainer(module, restSession)
    elif module.params["state"] == 'absent':
        deleteStorageContainer(module, restSession)
    
    
from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()